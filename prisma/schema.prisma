
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}




  // directUrl = env("DIRECT_URL")
model User {
  id      String      @id @default(uuid())
  email   String   @unique
  name    String?
  phone  String? @unique
  password String?


  role Role @default(CLIENT)


  UserProfile userProfile?
  // lawyerProfile lawyerProfile?
 
  // consultations Consultation[] @ignore
  // lawyertype String
  posts   Post[] @ignore
  lawyerProfile lawyerProfile?
  createdAt DateTime @default(now())
 
}
enum Role {
  CLIENT
  LAWYER
}


model lawyerProfile {
  id      String      @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId  String @unique


  primarySpecialization   Specialization? @relation("PrimarySpecialization", fields: [primarySpecializationId], references: [id])
  primarySpecializationId String? @unique
  secondarySpecializations SpecializationOnProfile[]


  barId         String?   @unique
  isVerified    verificationStatus   @default(AWAITING_CREDENTIALS)
  isVisible     Boolean   @default(false)


  location      String?
  gmapsLink     String?


  yearsOfExperience Int?
  consultFee    Decimal? @default(300) @db.Decimal(10, 2)
  // consultations Consultation[]


  knownLanguages String[]
  description   String?


  userRole Role @default(LAWYER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}


enum verificationStatus {
AWAITING_CREDENTIALS
SUBMITTED
PENDING
VERIFIED
}


model Specialization {
  id          String       @id @default(uuid())
  name        String    @unique
  primaryLawyers lawyerProfile[] @relation("PrimarySpecialization")
  secondaryLawyers SpecializationOnProfile[]
}


model SpecializationOnProfile {
  lawyerProfile lawyerProfile    @relation(fields: [profileId], references: [id])
  profileId     String
  specialization Specialization @relation(fields: [specializationId], references: [id])
  specializationId String


  @@id([profileId, specializationId])
  @@unique([profileId, specializationId])
}


model userProfile {
  id      String      @id @default(uuid())
  user    User    @relation(fields: [userId], references: [id])
  userId  String @unique
  preferredLanguages String?
  location String?
  age Int?


userRole Role @default(CLIENT)  


  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
 
}

// model Lawyer {


//   id      String      @id @default(uuid())
//   email   String   @unique
//   name    String  
//   phone  String @unique
//   knownLanguages String[]
//   location String?


//   password String?
//   age Int?
//   // lawyertype String
//       //  Profile     lawyerProfile?
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
//   consultations Consultation[]
// }


// model Consultation {
//   id          Int       @id @default(autoincrement())
//   userId      String
//   lawyerId    String
//   user        User      @relation(fields: [userId], references: [id])
//   lawyer      Lawyer    @relation(fields: [lawyerId], references: [id])
//   status      ConsultationStatus @default(PENDING)
//   scheduledFor DateTime
//   duration    Int       // in minutes
//   fee         Decimal   @db.Decimal(10, 2)
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
// }


// enum ConsultationStatus {
//   PENDING
//   CONFIRMED
//   COMPLETED
//   CANCELLED
// }






model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?


  @@ignore
}
